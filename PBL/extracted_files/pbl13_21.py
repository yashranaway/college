# -*- coding: utf-8 -*-
"""pbl13-21.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QPkT6-XfACX8spnMTSDa0bYSV-u83uMi

Write a program to read data from a CSV file using Pandas. Display the first
few rows (head()), information
(info()), and basic statistics (describe()) of the DataFrame. Save the modified DataFrame to a new CSV file.
"""

import pandas as pd

# Load the CSV file
df = pd.read_csv('Height_weight.csv')

# Display first few rows
print(df.head())

# Display DataFrame information
print(df.info())

# Display basic statistics
print(df.describe())

# Save modified DataFrame to a new CSV
df.to_csv('output.csv', index=False)

"""Write a program to create a DataFrame from a dictionary of lists. Use methods like head(), tail(), info(), and
describe() to explore and summarize the DataFrame.
"""

import pandas as pd

# Use the existing dataset 'Height_weight.csv'
df = pd.read_csv('Height_weight.csv')

# Explore the DataFrame
print(df.head())
print(df.tail())
print(df.info())
print(df.describe())

"""Write a program to group data in a DataFrame by a specific column using group by() and compute aggregate
statistics (e.g., sum, mean) on grouped data.
"""

import pandas as pd

# Load the CSV file
df = pd.read_csv('Height_weight.csv')

# Example: Group by 'Height' and calculate mean of 'Weight'
grouped = df.groupby('Height')['Weight'].mean()

print(grouped)

"""Write a program to filter rows from a DataFrame based on a condition using boolean indexing or the query()
method. Sort the filtered DataFrame by a specific column using sort_values().
"""

import pandas as pd

# Load the CSV file
df = pd.read_csv('Height_weight.csv')

# Filter rows where 'Weight' is greater than 60
filtered_df = df[df['Weight'] > 60]

# Sort by 'Height'
sorted_df = filtered_df.sort_values(by='Height')

print(sorted_df)

"""Write a program to handle missing values in a DataFrame using fillna() or dropna() methods. Perform
aggregation operations (sum(), mean(), etc.) on columns of the DataFrame.
"""

import pandas as pd

# Load the CSV file
df = pd.read_csv('Height_weight.csv')

# Fill missing values (if any) with the mean of the column
df_filled = df.fillna(df.mean())

# Perform aggregation operations
height_sum = df_filled['Height'].sum()
weight_mean = df_filled['Weight'].mean()

print(f"Sum of Heights: {height_sum}")
print(f"Mean of Weights: {weight_mean}")

"""Write a program to create a simple line plot, scatter plot, histogram, and bar plot using Matplotlib. Customize
each plot with appropriate labels, titles, colors, and markers.
"""

import pandas as pd
import matplotlib.pyplot as plt

# Load the CSV file
df = pd.read_csv('Height_weight.csv')

# Line plot
plt.figure()
plt.plot(df['Height'], df['Weight'], marker='o')
plt.title('Line Plot')
plt.xlabel('Height')
plt.ylabel('Weight')
plt.show()

# Scatter plot
plt.figure()
plt.scatter(df['Height'], df['Weight'], color='red')
plt.title('Scatter Plot')
plt.xlabel('Height')
plt.ylabel('Weight')
plt.show()

# Histogram
plt.figure()
plt.hist(df['Weight'], bins=5, color='green')
plt.title('Histogram')
plt.xlabel('Weight')
plt.ylabel('Frequency')
plt.show()

# Bar plot
plt.figure()
plt.bar(df['Height'], df['Weight'], color='blue')
plt.title('Bar Plot')
plt.xlabel('Height')
plt.ylabel('Weight')
plt.show()

"""Write a program to create a box and whiskers plot and an area plot using Matplotlib. Include multiple subplots
in a single figure to display different plots side by side.
"""

import pandas as pd
import matplotlib.pyplot as plt

# Load the CSV file
df = pd.read_csv('Height_weight.csv')

# Create subplots
fig, axs = plt.subplots(1, 2, figsize=(10, 5))

# Box plot
axs[0].boxplot(df['Weight'])
axs[0].set_title('Box Plot')

# Area plot
axs[1].fill_between(df.index, df['Weight'], color='orange', alpha=0.5)
axs[1].set_title('Area Plot')

plt.tight_layout()
plt.show()

"""Write a program to create a scatter plot, histogram, bar plot, box plot, and violin plot using Seaborn. Visualize
correlations between multiple variables using the pair plot function.
"""

import seaborn as sns
import pandas as pd
import matplotlib.pyplot as plt

# Load the CSV file
df = pd.read_csv('Height_weight.csv')

# Scatter plot
sns.scatterplot(x='Height', y='Weight', data=df)
plt.title('Scatter Plot')
plt.show()

# Histogram
sns.histplot(df['Weight'], bins=5)
plt.title('Histogram')
plt.show()

# Bar plot
sns.barplot(x='Height', y='Weight', data=df)
plt.title('Bar Plot')
plt.show()

# Box plot
sns.boxplot(x='Weight', data=df)
plt.title('Box Plot')
plt.show()

# Violin plot
sns.violinplot(x='Weight', data=df)
plt.title('Violin Plot')
plt.show()

# Pair plot
sns.pairplot(df)
plt.title('Pair Plot')
plt.show()

"""Write a program to demonstrate various indexing techniques (e.g., accessing specific elements, rows,
columns) and slicing operations to extract subarrays. Include examples of Boolean and fancy indexing.
"""

import pandas as pd

# Load the CSV file
df = pd.read_csv('Height_weight.csv')

# Accessing specific elements
print(df.loc[0, 'Height'])  # First row, 'Height' column

# Accessing specific rows
print(df.iloc[1:5])  # Rows 1 to 4

# Accessing specific columns
print(df['Weight'])

# Boolean indexing
filtered_df = df[df['Weight'] > 60]
print(filtered_df)

# Fancy indexing
print(df.loc[[0, 3, 6], ['Height', 'Weight']])